#ifndef rspfModelOptimizer_HEADER
#define rspfModelOptimizer_HEADER

#include <rspf/base/rspfObject.h>
#include <rspf/base/rspfConnectableObject.h>
#include <rspf/base/rspfPropertyInterface.h>
#include <rspf/base/rspfProcessInterface.h>
#include <rspf/base/rspfProcessProgressEvent.h>
#include <rspf/base/rspfRefPtr.h>
#include <rspf/base/rspfString.h>
#include <rspf/base/rspfTieGptSet.h>
#include <rspf/projection/rspfProjection.h>
#include "rspfRegistrationExports.h"

/*!
 * class rspfModelOptimizer
 * class for optimizing an existing projection model or creating new model from a set of tie points
 *
 * you can use rspfImageCorrelator to get an input (object rspfTieGptSet)
 *
 */
class RSPF_REGISTRATION_DLL rspfModelOptimizer : public rspfConnectableObject,
                                                   public rspfProcessInterface
{
public:
   rspfModelOptimizer();
   virtual ~rspfModelOptimizer() {}

   bool canConnectMyInputTo(rspf_int32 inputIndex,
                            const rspfConnectableObject* object)const
   {
      return false;
   }
  /*!
   * accessors to parms
   */   
   inline void  setTieSet(const rspfTieGptSet& aTieSet) { theTieSet=aTieSet; }
   inline const rspfTieGptSet& getTieSet()const { return theTieSet; }

   inline void  setTiesetFilename(const rspfString& t) { theTiesetFilename = t; }
   inline const rspfString& getTiesetFilename()const { return theTiesetFilename; }

   inline void  setModelDefinitionString(const rspfString& t) { theModelDefinitionString = t; }
   inline const rspfString& getModelDefinitionString()const { return theModelDefinitionString; }

   inline void  setGeomOutputFilename(const rspfFilename& op) { theGeomOutputFilename=op; }
   inline const rspfFilename& getGeomOutputFilename()const { return theGeomOutputFilename; }

   inline rspfRefPtr< rspfProjection > refModel()const { return theModel; }

   bool loadGMLTieSet(const rspfString& filepath); //! file can be generated by correl

   virtual bool setupModel(const rspfString& description);
   virtual bool exportModel(const rspfFilename& geomFile)const;

   /*!
    * rspfObject interface
    */
   virtual       rspfObject* getObject()      { return this; }
   virtual const rspfObject* getObject()const { return this; }
   virtual       rspfObject* getObjectInterface() { return this; }

   /*!
    * property interface
    */
   virtual void setProperty(rspfRefPtr<rspfProperty> property);
   virtual rspfRefPtr<rspfProperty> getProperty(const rspfString& name)const;
   virtual void getPropertyNames(std::vector<rspfString>& propertyNames)const;

   /* !
    * optimization method: 
    * returns: true for success
    *          variance , unit pixel^2(if pointer not NULL)
    * INPUT: target variance in pixel^2 (optional)
    */
   virtual bool optimize(rspf_float64* result_var_pix2 = NULL,
                         rspf_float64* target_var_pix2 = NULL);

   virtual bool execute(); //!process interface to run model optimization

protected:
   rspfTieGptSet                 theTieSet;
   rspfString                    theTiesetFilename;
   rspfString                    theModelDefinitionString;
   rspfFilename                  theGeomOutputFilename;
   rspfRefPtr< rspfProjection > theModel;

   inline rspfModelOptimizer(const rspfModelOptimizer& copyme) {} //!disable copy constructor
   TYPE_DATA
};

#endif //rspfModelOptimizer_HEADER
